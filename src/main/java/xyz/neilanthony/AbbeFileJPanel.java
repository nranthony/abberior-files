
package xyz.neilanthony;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JPanel;

/**
 *
 * @author nelly
 */
class AbbeFileJPanel extends javax.swing.JPanel {

    Params.FileParams fP = new Params.FileParams();
    LoadingRunnable loadingRunnable = new LoadingRunnable();
    Thread loadingThread = new Thread(loadingRunnable);
    boolean ready = false;
    JLabel jLabel_Open;
    JLabel jLabel_OpenClick;
    JPanel jButtonOpen;
    
    /**
     * Creates new form AbbeFileJPanel
     */
    AbbeFileJPanel(Params.FileParams params) {
        initComponents();
        
        this.fP = params;
        this.jLabel_Filename.setText(params.fileName);
        this.jLabel_Filename.setForeground(Color.CYAN);
        this.jLabel_Loading.setForeground(Color.pink);
        this.setBackground(UIColors.colorBkgdPanel);
        this.loadingThread.start();
        
        jPanel_Button.setBackground(UIColors.colorBkgdPanel);
        
        String openIconPath = "open.png";
        ImageIcon imgIconOpen = new ImageIcon(
                getClass().getClassLoader().getResource(openIconPath));
        jLabel_Open = new JLabel();
        jLabel_Open.setBounds(10,10,48,48);
        jLabel_Open.setIcon(imgIconOpen);
        jPanel_Button.add(jLabel_Open);

        openIconPath = "open-click.png";
        ImageIcon imgIconOpenClick = new ImageIcon(
                getClass().getClassLoader().getResource(openIconPath));
        jLabel_OpenClick = new JLabel();
        jLabel_OpenClick.setBounds(10,10,48,48);
        jLabel_OpenClick.setIcon(imgIconOpenClick);
        
        jButtonOpen = this.jPanel_Button;
    }
    
    class LoadingRunnable implements Runnable {
        
        private int dotCount = 0;
        private int dotMax = 12;
        private double timeCounter = 0.0;
        private char[] dots = new char[dotMax];
        private String[] dotStrs = new String[dotMax];
        
        private boolean stopThreadNow = false;
        synchronized void stopThread(Map labelHashMap) {
            this.stopThreadNow = true;
            jLabel_Loading.setText("Done");
            try { Thread.sleep(300);
                } catch (InterruptedException ex) {
                    Logger.getLogger(AbbeFileJPanel.class.getName()).log(Level.SEVERE, null, ex);
                }
            displayLabelsUsed(labelHashMap);
        }
        private synchronized boolean keepRunning() { return this.stopThreadNow == false; }

        private void updateLoadingLabel () {
            if (this.stopThreadNow) {
                jLabel_Loading.setText("Complete");
                return;
            }
            double dotFraction;
            dotFraction = Math.round ( Math.abs(
                                Math.sin(timeCounter) * Double.valueOf(dotMax-1) ));
//            jLabel_Loading.setText(String.format("Loading%s",
//                    String.valueOf(Arrays.copyOfRange(dots, 0, (int)dotFraction))));
            jLabel_Loading.setText(String.format("Loading%s",dotStrs[((int)dotFraction)]));
            timeCounter += 0.2;
        }
        
        @Override
        public void run() {
            
            dotStrs[0] = "";
            dotStrs[1] = ".";
            dotStrs[2] = "..";
            dotStrs[3] = "...";
            dotStrs[4] = "....";
            dotStrs[5] = ".....";
            dotStrs[6] = "......";
            dotStrs[7] = ".......";
            dotStrs[8] = "........";
            dotStrs[9] = ".........";
            dotStrs[10] = "..........";
            dotStrs[11] = "...........";
           
//            for (char c : dots) { c = '.'; }
            while (keepRunning()) {
                updateLoadingLabel();
                
                try { Thread.sleep(150);
                } catch (InterruptedException ex) {
                    Logger.getLogger(AbbeFileJPanel.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel_Filename = new javax.swing.JLabel();
        jLabel_Loading = new javax.swing.JLabel();
        jPanel_Button = new javax.swing.JPanel();

        setMaximumSize(new java.awt.Dimension(198, 97));
        setMinimumSize(new java.awt.Dimension(268, 128));

        jLabel_Filename.setFont(new java.awt.Font("Segoe UI Light", 0, 18)); // NOI18N
        jLabel_Filename.setText("filenamegoeshere.obf");

        jLabel_Loading.setFont(new java.awt.Font("Segoe UI Light", 0, 18)); // NOI18N
        jLabel_Loading.setText("Loading...");

        javax.swing.GroupLayout jPanel_ButtonLayout = new javax.swing.GroupLayout(jPanel_Button);
        jPanel_Button.setLayout(jPanel_ButtonLayout);
        jPanel_ButtonLayout.setHorizontalGroup(
            jPanel_ButtonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 86, Short.MAX_VALUE)
        );
        jPanel_ButtonLayout.setVerticalGroup(
            jPanel_ButtonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 88, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel_Filename)
                    .addComponent(jLabel_Loading))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 24, Short.MAX_VALUE)
                .addComponent(jPanel_Button, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel_Filename)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel_Loading)
                    .addComponent(jPanel_Button, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );
    }// </editor-fold>//GEN-END:initComponents

    boolean fileSelected() {
        return fP.panelSelected;
    }
    
    void setOpenClick() {
        //AbbeFileJPanel.this.jPanel_Button.add(AbbeFileJPanel.this.jLabel_OpenClick);
        this.jPanel_Button.removeAll();
        this.jPanel_Button.add(this.jLabel_OpenClick);
        this.repaint();
        this.revalidate();
    }
    void setOpenNotClick() {
        //AbbeFileJPanel.this.jPanel_Button.add(AbbeFileJPanel.this.jLabel_Open);
        this.jPanel_Button.removeAll();
        this.jPanel_Button.add(this.jLabel_Open);
        this.repaint();
        this.revalidate();
    }
    
    void setButtonPanelSelected() {
        this.jPanel_Button.setBackground(UIColors.colorBkgdSelected);
    }
    void setButtonPanelUnselected() {
        this.jPanel_Button.setBackground(UIColors.colorBkgdPanel);
    }
        
    private void displayLabelsUsed (Map labelHashMap) {
        
        this.remove(jLabel_Loading);
        fP.labelsUsed = labelHashMap;
        
        int i = 0;
        for(Object key : labelHashMap.keySet() ) {
            JLabel lab = new JLabel();
            lab.setText((String) labelHashMap.get((Integer)key));
            lab.setBackground(null);
            lab.setForeground(Spectral.spectral_color(((Integer)key).doubleValue()));
            lab.setOpaque(true);
            lab.setFont(new Font("Segoe UI Light", Font.PLAIN, 16));
            lab.setBounds(40, 45 + (i*22), 200, 22);
            i++;
            this.add(lab);
        }
        fP.panelSelected = true;
        //this.setBackground(UIColors.colorBkgdSelected);
        this.revalidate();
        this.repaint();
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel_Filename;
    private javax.swing.JLabel jLabel_Loading;
    private javax.swing.JPanel jPanel_Button;
    // End of variables declaration//GEN-END:variables
}
